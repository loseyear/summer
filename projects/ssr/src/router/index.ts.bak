import * as fs from 'fs';
import * as path from 'path';
import { Context } from 'koa';
import Router, { IMiddleware } from 'koa-router';

interface Mapping {
  [url: string]: (ctx: Context) => void;
}

const router = new Router({
  prefix: '/api',
});

const addMapping = (route: Router, mapping: Mapping) => {
  Object.entries(mapping).forEach(([url, handler]) => {
    switch (true) {
      case url.startsWith('GET'):
        route.get(url.substring(4), handler);
        console.log(route)
        break;
      case url.startsWith('POST'):
        route.post(url.substring(5), handler);
        break;
      case url.startsWith('PUT'):
        route.put(url.substring(4), handler);
        break;
      case url.startsWith('DELETE'):
        route.delete(url.substring(7), handler);
        break;
      default:
        break;
    }
  });
};

const addControllers = (route: Router, dir: string) => {
  const a = fs.readdirSync(path.join(__dirname.toString(), '/../', dir))
    .filter((f: string) => f.endsWith('.ts'))
    .forEach((f: string) => {
      const controller = require(path.join(__dirname.toString(), '/../', dir, '/', f))
      addMapping(route, controller)
    })
}

const routesMiddleware: IMiddleware = (ctx, next) => {
  return router.routes()(ctx, next)
}

export default (): IMiddleware => {
  const controllersDir: string = 'controller'
  addControllers(router, controllersDir)
  return routesMiddleware
}
